package generator

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// GenerateServers generates HTTP servers for all services if the file
func (g *Generator) GenerateServers(gen *protogen.Plugin, file *protogen.File) (err error) {
	gf := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+".httpgo.srv.go", file.GoImportPath)
	gf.P("// Code generated by protoc-gen-httpgo. DO NOT EDIT.")
	gf.P("// source: ", file.Desc.Path())
	gf.P()
	gf.P("package ", file.GoPackageName)

	for _, service := range g.services {
		g.genServiceInterface(gf, service)
		if err = g.genServiceServer(gf, service); err != nil {
			return err
		}
	}

	g.genResponseHandler(gf)
	g.genChainMiddlewares(gf)
	return nil
}

// genServiceInterface generates interface for HTTP server and client
func (g *Generator) genServiceInterface(gf *protogen.GeneratedFile, service serviceParams) {
	gf.P("type ", service.name, "HTTPGoService interface {")
	for _, method := range service.methods {
		gf.P(
			"	", method.name, "(", contextPackage.Ident("Context"), ", *", method.inputMsgName, ") ",
			"(*", method.outputMsgName, ", error)",
		)
	}
	gf.P("}")
}

// genServiceServer generates HTTP server for serviceParams
func (g *Generator) genServiceServer(gf *protogen.GeneratedFile, service serviceParams) (err error) {
	gf.P("func Register", service.name, "HTTPGoServer(")
	gf.P("	ctx ", contextPackage.Ident("Context"), ",")
	gf.P("	r *", routerPackage.Ident("Router"), ",")
	gf.P("	h ", service.name, "HTTPGoService,")
	gf.P("	middlewares []func(ctx *", fasthttpPackage.Ident("RequestCtx"), ", handler func(ctx *", fasthttpPackage.Ident("RequestCtx"), ")),")
	gf.P(") error {")
	gf.P("	var middleware = chainMiddlewares", g.filename, "(middlewares)")
	for _, method := range service.methods {
		g.genMethodDeclaration(gf, service.name, method)
	}

	gf.P("	return nil")
	gf.P("}")
	gf.P()

	for _, method := range service.methods {
		if err = g.genBuildRequestMethod(gf, service.name, method); err != nil {
			return err
		}
	}
	gf.P()

	return nil
}

// genMethodDeclaration generates binding route with handler
func (g *Generator) genMethodDeclaration(gf *protogen.GeneratedFile, serviceName string, method methodParams) {
	gf.P("	r.", method.httpMethodName, "( \"", method.uri, "\", func(ctx *", fasthttpPackage.Ident("RequestCtx"), ") { ")
	gf.P("		handler := func(ctx *", fasthttpPackage.Ident("RequestCtx"), ") {")
	gf.P("			input, err := build", g.getBuildMethodInputName(serviceName, method), "(ctx)")
	gf.P("			if err != nil {")
	gf.P("				responseHandler", g.filename, "(ctx, nil, err)")
	gf.P("				return")
	gf.P("			}")
	gf.P("			response, err := h.", method.name, "(ctx, input)")
	gf.P("			responseHandler", g.filename, "(ctx, response, err)")
	gf.P("		}")
	gf.P("		if middleware == nil {")
	gf.P("			handler(ctx)")
	gf.P("			return")
	gf.P("		}")
	gf.P("		middleware(ctx, handler)")
	gf.P("	})")
	gf.P()
}

// getBuildMethodInputName creates name for function that builds method request
func (g *Generator) getBuildMethodInputName(serviceName string, method methodParams) string {
	methodName := g.filename + serviceName + method.name + method.inputMsgName.GoName
	return strings.NewReplacer(".", "", "-", "", "_", "").Replace(methodName)
}

// genBuildRequestMethod generates method that build request struct
func (g *Generator) genBuildRequestMethod(gf *protogen.GeneratedFile, serviceName string, method methodParams) error {
	gf.P("func build", g.getBuildMethodInputName(serviceName, method), "(ctx *", fasthttpPackage.Ident("RequestCtx"), ") (arg *", method.inputMsgName, ", err error) {")
	gf.P("	arg = &", method.inputMsgName, "{}")
	g.genUnmarshalRequestStruct(gf)

	var err error
	for _, match := range uriParametersRegexp.FindAllStringSubmatch(method.uri, -1) {
		if f, ok := method.fields[match[1]]; ok {
			if err = g.genBuildRequestArgument(gf, f); err != nil {
				return err
			}
		}
	}

	gf.P("	return arg, err")
	gf.P("}")
	gf.P()
	return nil
}

// genBuildRequestArgument generates code for request argument
func (g *Generator) genBuildRequestArgument(
	gf *protogen.GeneratedFile,
	field field,
) error {
	gf.P("	", field.goName, "Str, ok := ctx.UserValue(\"", field.protoName, "\").(string)")
	gf.P("	if !ok {")
	gf.P("		return nil, ", errorsPackage.Ident("New"), "(\"incorrect type for parameter ", field.goName, "\")")
	gf.P("	}")
	switch field.kind {
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Uint32Kind, protoreflect.Sfixed32Kind, protoreflect.Fixed32Kind:
		gf.P("	", field.goName, ", err := ", strconvPackage.Ident("ParseInt"), "(", field.goName, "Str, 10, 32)")
		gf.P("	if err != nil {")
		gf.P("		return nil, ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", field.goName, ": %w\", err)")
		gf.P("	}")
		gf.P("	arg.", field.goName, " = ", field.getGolangTypeName(), "(", field.goName, ")")
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
		gf.P("	arg.", field.goName, ", err = ", strconvPackage.Ident("ParseInt"), "(", field.goName, "Str, 10, 64)")
		gf.P("	if err != nil {")
		gf.P("		return nil, ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", field.goName, ": %w\", err)")
		gf.P("	}")
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		gf.P("	", field.goName, ", err := ", strconvPackage.Ident("ParseInt"), "(", field.goName, "Str, 10, 64)")
		gf.P("	if err != nil {")
		gf.P("		return nil, ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", field.goName, ": %w\", err)")
		gf.P("	}")
		gf.P("	arg.", field.goName, " = ", field.getGolangTypeName(), "(", field.goName, ")")
	case protoreflect.DoubleKind:
		gf.P("	arg.", field.goName, ", err = ", strconvPackage.Ident("ParseFloat"), "(", field.goName, "Str, 64)")
		gf.P("	if err != nil {")
		gf.P("		return nil, ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", field.goName, ": %w\", err)")
		gf.P("	}")
	case protoreflect.FloatKind:
		gf.P("	", field.goName, ", err := ", strconvPackage.Ident("ParseFloat"), "(", field.goName, "Str, 32)")
		gf.P("	if err != nil {")
		gf.P("		return nil, ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", field.goName, ": %w\", err)")
		gf.P("	}")
		gf.P("	arg.", field.goName, " = float32(", field.goName, ")")
	case protoreflect.StringKind:
		gf.P("	arg.", field.goName, " = ", field.goName, "Str")
	case protoreflect.BytesKind:
		gf.P("	arg.", field.goName, " = []byte(", field.goName, "Str)")
	case protoreflect.BoolKind:
		gf.P("	switch ", field.goName, "Str {")
		gf.P("	case \"true\", \"t\", \"1\":")
		gf.P("		arg.BoolValue = true")
		gf.P("	case \"false\", \"f\", \"0\":")
		gf.P("		arg.BoolValue = false")
		gf.P("	default:")
		gf.P("		return nil, ", fmtPackage.Ident("Errorf"), "(\"unknown bool string value %s\", ", field.goName, "Str)")
		gf.P("	}")
	case protoreflect.EnumKind:
		gf.P("	if ", field.enumName, "Value, ok := ", field.enumName, "_value[", stringsPackage.Ident("ToUpper"), "(", field.goName, "Str)]; ok {")
		gf.P("		arg.", field.goName, " = ", field.enumName, "(", field.enumName, "Value)")
		gf.P("	} else {")
		gf.P("		if intOptionValue, err := ", strconvPackage.Ident("ParseInt"), "(", field.goName, "Str, 10, 32); err == nil {")
		gf.P("			if _, ok := ", field.enumName, "_name[int32(intOptionValue)]; ok {")
		gf.P("	arg.", field.goName, " = ", field.enumName, "(intOptionValue)")
		gf.P("			}")
		gf.P("		}")
		gf.P("	}")
	default:
		return fmt.Errorf("unsupported type %s for path variable", field.kind.String())
	}
	gf.P()
	return nil
}

// genResponseHandler generates common handler for any response
func (g *Generator) genResponseHandler(gf *protogen.GeneratedFile) {
	gf.P("func responseHandler", g.filename, "(ctx *", fasthttpPackage.Ident("RequestCtx"), ", resp interface{}, respErr error) {")
	gf.P("	ctx.SetContentType(\"application/json\")")
	gf.P()
	gf.P("	if respErr == nil {")
	gf.P("		ctx.SetStatusCode(", fasthttpPackage.Ident("StatusOK"), ")")
	gf.P("	} else {")
	gf.P("		", logPackage.Ident("Println"), "(respErr)")
	gf.P("		ctx.SetStatusCode(", fasthttpPackage.Ident("StatusInternalServerError"), ")")
	gf.P("	}")
	gf.P()
	g.genMarshalResponseStruct(gf)
	gf.P("	_, _ = ctx.Write(data)")
	gf.P("}")
	gf.P()
}

// genChainMiddlewares generates middleware chain functions
func (g *Generator) genChainMiddlewares(gf *protogen.GeneratedFile) {
	gf.P("func chainMiddlewares", g.filename, "(")
	gf.P("	middlewares []func(ctx *", fasthttpPackage.Ident("RequestCtx"), ", handler func(ctx *", fasthttpPackage.Ident("RequestCtx"), ")),")
	gf.P(") func(ctx *", fasthttpPackage.Ident("RequestCtx"), ", handler func(ctx *", fasthttpPackage.Ident("RequestCtx"), ")) {")
	gf.P("	switch len(middlewares) {")
	gf.P("	case 0:")
	gf.P("		return nil")
	gf.P("	case 1:")
	gf.P("		return middlewares[0]")
	gf.P("	default:")
	gf.P("		return func(ctx *", fasthttpPackage.Ident("RequestCtx"), ", handler func(ctx *", fasthttpPackage.Ident("RequestCtx"), ")) {")
	gf.P("			middlewares[0](ctx, getChainMiddlewareHandler", g.filename, "(middlewares, 0, handler))")
	gf.P("		}")
	gf.P("	}")
	gf.P("}")
	gf.P()
	gf.P("func getChainMiddlewareHandler", g.filename, "(")
	gf.P("	middlewares []func(ctx *", fasthttpPackage.Ident("RequestCtx"), ", handler func(ctx *", fasthttpPackage.Ident("RequestCtx"), ")),")
	gf.P("	curr int,")
	gf.P("	finalHandler func(ctx *", fasthttpPackage.Ident("RequestCtx"), "),")
	gf.P(") func(ctx *", fasthttpPackage.Ident("RequestCtx"), ") {")
	gf.P("	if curr == len(middlewares)-1 {")
	gf.P("		return finalHandler")
	gf.P("	}")
	gf.P("	return func(ctx *", fasthttpPackage.Ident("RequestCtx"), ") {")
	gf.P("		middlewares[curr+1](ctx, getChainMiddlewareHandler", g.filename, "(middlewares, curr+1, finalHandler))")
	gf.P("	}")
	gf.P("}")
}

// genMarshalResponseStruct generates marshalling from struct to []byte for response
func (g *Generator) genMarshalResponseStruct(gf *protogen.GeneratedFile) {
	switch *g.cfg.Marshaller {
	case marshallerEasyJSON:
		gf.P("	var data []byte")
		gf.P("	if _, ok := resp.(", easyjsonPackage.Ident("Marshaler"), "); ok {")
		gf.P("		data, _ = ", easyjsonPackage.Ident("Marshal"), "(resp.(", easyjsonPackage.Ident("Marshaler))"))
		gf.P("	} else {")
		gf.P("		data, _ = ", jsonPackage.Ident("Marshal"), "(resp)")
		gf.P("	}")
	default:
		gf.P("	var data, _ = ", jsonPackage.Ident("Marshal"), "(resp)")
	}
}

// genUnmarshalRequestStruct generates unmarshalling from []byte to struct for request
func (g *Generator) genUnmarshalRequestStruct(gf *protogen.GeneratedFile) {
	switch *g.cfg.Marshaller {
	case marshallerEasyJSON:
		gf.P("	if argEJ, ok := interface{}(arg).(", easyjsonPackage.Ident("Unmarshaler"), "); ok {")
		gf.P("		if err = ", easyjsonPackage.Ident("Unmarshal"), "(ctx.PostBody(), argEJ); err != nil {")
		gf.P("			return nil, err")
		gf.P("		}")
		gf.P("	} else {")
		gf.P("		if err = ", jsonPackage.Ident("Unmarshal"), "(ctx.PostBody(), arg); err != nil {")
		gf.P("			return nil, err")
		gf.P("		}")
		gf.P("	}")
	default:
		gf.P("	err = ", jsonPackage.Ident("Unmarshal"), "(ctx.PostBody(), arg)")
	}
}
