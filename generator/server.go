package generator

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// GenerateServers generates HTTP servers for all services if the file
func (g *Generator) GenerateServers(file *protogen.File) (err error) {
	g.gf.P("// Code generated by protoc-gen-httpgo. DO NOT EDIT.")
	g.gf.P("// source: ", file.Desc.Path())
	g.gf.P()
	g.gf.P("package ", file.GoPackageName)

	for _, service := range g.services {
		g.genServiceInterface(service)
		if *g.cfg.Only == onlyClient {
			continue
		}
		if err = g.genServiceServer(service); err != nil {
			return err
		}
	}
	if *g.cfg.Only == onlyClient {
		return nil
	}

	g.genChainServerMiddlewares()
	return nil
}

// genServiceInterface generates interface for HTTP server and client
func (g *Generator) genServiceInterface(service serviceParams) {
	g.gf.P("type ", service.name, "HTTPGoService interface {")
	for _, method := range service.methods {
		g.gf.P(
			"	", method.name, "(", contextPackage.Ident("Context"), ", *", method.inputMsgName, ") ",
			"(*", method.outputMsgName, ", error)",
		)
	}
	g.gf.P("}")
}

// genServiceServer generates HTTP server for serviceParams
func (g *Generator) genServiceServer(service serviceParams) (err error) {
	g.gf.P("func Register", service.name, "HTTPGoServer(")
	g.gf.P("	ctx ", contextPackage.Ident("Context"), ",")
	g.gf.P("	r *", routerPackage.Ident("Router"), ",")
	g.gf.P("	h ", service.name, "HTTPGoService,")
	g.gf.P("	middlewares []func(", g.serverInput, ", handler func(", g.serverInput, ") (", g.serverOutput, ")) (", g.serverOutput, "),")
	g.gf.P(") error {")
	g.gf.P("	var middleware = chainServerMiddlewares", g.filename, "(middlewares)")
	for _, method := range service.methods {
		g.genMethodDeclaration(service.name, method)
	}
	g.gf.P("	return nil")
	g.gf.P("}")
	g.gf.P()

	for _, method := range service.methods {
		if err = g.genBuildRequestMethod(service.name, method); err != nil {
			return err
		}
	}
	g.gf.P()
	return nil
}

// genMethodDeclaration generates binding route with handler
func (g *Generator) genMethodDeclaration(serviceName string, method methodParams) {
	g.gf.P("	r.", method.httpMethodName, "( \"", method.uri, "\", func(ctx *", fasthttpPackage.Ident("RequestCtx"), ") { ")
	g.gf.P("		handler := func(", g.serverInput, ") (", g.serverOutput, ") {")
	g.gf.P("			input, err := build", g.getBuildMethodInputName(serviceName, method), "(ctx)")
	g.gf.P("			if err != nil {")
	g.gf.P("				return nil, err")
	g.gf.P("			}")
	g.gf.P("			return h.", method.name, "(ctx, input)")
	g.gf.P("		}")
	g.gf.P("		if middleware == nil {")
	g.gf.P("			handler(ctx)")
	g.gf.P("			return")
	g.gf.P("		}")
	g.gf.P("		middleware(ctx, handler)")
	g.gf.P("	})")
	g.gf.P()
}

// getBuildMethodInputName creates name for function that builds method request
func (g *Generator) getBuildMethodInputName(serviceName string, method methodParams) string {
	methodName := g.filename + serviceName + method.name + method.inputMsgName.GoName
	return strings.NewReplacer(".", "", "-", "", "_", "").Replace(methodName)
}

// genBuildRequestMethod generates method that build request struct
func (g *Generator) genBuildRequestMethod(serviceName string, method methodParams) error {
	g.gf.P("func build", g.getBuildMethodInputName(serviceName, method), "(ctx *", fasthttpPackage.Ident("RequestCtx"), ") (arg *", method.inputMsgName, ", err error) {")
	g.gf.P("	arg = &", method.inputMsgName, "{}")
	g.genUnmarshalRequestStruct()

	var err error
	g.gf.P("ctx.QueryArgs().VisitAll(func(key, value []byte) {")
	g.gf.P("	var strKey = string(key)")
	g.gf.P("	switch strKey {")
	for _, f := range method.fields {
		if err = g.genQueryCheck(f); err != nil {
			return err
		}
	}
	g.gf.P("	}")
	g.gf.P("})")
	g.gf.P("if err != nil {")
	g.gf.P("	return nil, err")
	g.gf.P("}")

	for _, match := range uriParametersRegexp.FindAllStringSubmatch(method.uri, -1) {
		if f, ok := method.fields[match[1]]; ok {
			if err = g.genBuildRequestArgument(f); err != nil {
				return err
			}
		}
	}

	g.gf.P("	return arg, err")
	g.gf.P("}")
	g.gf.P()
	return nil
}

// genBuildRequestArgument generates code for request argument
func (g *Generator) genBuildRequestArgument(
	f field,
) error {
	g.gf.P("	", f.goName, "Str, ok := ctx.UserValue(\"", f.protoName, "\").(string)")
	g.gf.P("	if !ok {")
	g.gf.P("		return nil, ", errorsPackage.Ident("New"), "(\"incorrect type for parameter ", f.goName, "\")")
	g.gf.P("	}")
	switch f.kind {
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Uint32Kind, protoreflect.Sfixed32Kind, protoreflect.Fixed32Kind:
		g.gf.P("	", f.goName, ", err := ", strconvPackage.Ident("ParseInt"), "(", f.goName, "Str, 10, 32)")
		g.gf.P("	if err != nil {")
		g.gf.P("		return nil, ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", f.goName, ": %w\", err)")
		g.gf.P("	}")
		g.gf.P("	arg.", f.goName, " = ", f.getGolangTypeName(), "(", f.goName, ")")
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
		g.gf.P("	arg.", f.goName, ", err = ", strconvPackage.Ident("ParseInt"), "(", f.goName, "Str, 10, 64)")
		g.gf.P("	if err != nil {")
		g.gf.P("		return nil, ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", f.goName, ": %w\", err)")
		g.gf.P("	}")
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		g.gf.P("	", f.goName, ", err := ", strconvPackage.Ident("ParseInt"), "(", f.goName, "Str, 10, 64)")
		g.gf.P("	if err != nil {")
		g.gf.P("		return nil, ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", f.goName, ": %w\", err)")
		g.gf.P("	}")
		g.gf.P("	arg.", f.goName, " = ", f.getGolangTypeName(), "(", f.goName, ")")
	case protoreflect.DoubleKind:
		g.gf.P("	arg.", f.goName, ", err = ", strconvPackage.Ident("ParseFloat"), "(", f.goName, "Str, 64)")
		g.gf.P("	if err != nil {")
		g.gf.P("		return nil, ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", f.goName, ": %w\", err)")
		g.gf.P("	}")
	case protoreflect.FloatKind:
		g.gf.P("	", f.goName, ", err := ", strconvPackage.Ident("ParseFloat"), "(", f.goName, "Str, 32)")
		g.gf.P("	if err != nil {")
		g.gf.P("		return nil, ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", f.goName, ": %w\", err)")
		g.gf.P("	}")
		g.gf.P("	arg.", f.goName, " = float32(", f.goName, ")")
	case protoreflect.StringKind:
		g.gf.P("	arg.", f.goName, " = ", f.goName, "Str")
	case protoreflect.BytesKind:
		g.gf.P("	arg.", f.goName, " = []byte(", f.goName, "Str)")
	case protoreflect.BoolKind:
		g.gf.P("	switch ", f.goName, "Str {")
		g.gf.P("	case \"true\", \"t\", \"1\":")
		g.gf.P("		arg." + f.goName + " = true")
		g.gf.P("	case \"false\", \"f\", \"0\":")
		g.gf.P("		arg." + f.goName + " = false")
		g.gf.P("	default:")
		g.gf.P("		return nil, ", fmtPackage.Ident("Errorf"), "(\"unknown bool string value %s\", ", f.goName, "Str)")
		g.gf.P("	}")
	case protoreflect.EnumKind:
		g.gf.P("	if ", f.enumName, "Value, ok := ", f.enumName, "_value[", stringsPackage.Ident("ToUpper"), "(", f.goName, "Str)]; ok {")
		g.gf.P("		arg.", f.goName, " = ", f.enumName, "(", f.enumName, "Value)")
		g.gf.P("	} else {")
		g.gf.P("		if intOptionValue, err := ", strconvPackage.Ident("ParseInt"), "(", f.goName, "Str, 10, 32); err == nil {")
		g.gf.P("			if _, ok := ", f.enumName, "_name[int32(intOptionValue)]; ok {")
		g.gf.P("	arg.", f.goName, " = ", f.enumName, "(intOptionValue)")
		g.gf.P("			}")
		g.gf.P("		}")
		g.gf.P("	}")
	default:
		return fmt.Errorf("unsupported type %s for path variable", f.kind.String())
	}
	g.gf.P()
	return nil
}

// genChainServerMiddlewares generates server middleware chain functions
func (g *Generator) genChainServerMiddlewares() {
	g.gf.P("func chainServerMiddlewares", g.filename, "(")
	g.gf.P("	middlewares []func(", g.serverInput, ", handler func(", g.serverInput, ")(", g.serverOutput, ")) (", g.serverOutput, "),")
	g.gf.P(") func(", g.serverInput, ", handler func(", g.serverInput, ")(", g.serverOutput, ")) (", g.serverOutput, ") {")
	g.gf.P("	switch len(middlewares) {")
	g.gf.P("	case 0:")
	g.gf.P("		return nil")
	g.gf.P("	case 1:")
	g.gf.P("		return middlewares[0]")
	g.gf.P("	default:")
	g.gf.P("		return func(", g.serverInput, ", handler func(", g.serverInput, ")(", g.serverOutput, ")) (", g.serverOutput, ") {")
	g.gf.P("			return middlewares[0](ctx, getChainServerMiddlewareHandler", g.filename, "(middlewares, 0, handler))")
	g.gf.P("		}")
	g.gf.P("	}")
	g.gf.P("}")
	g.gf.P()
	g.gf.P("func getChainServerMiddlewareHandler", g.filename, "(")
	g.gf.P("	middlewares []func(", g.serverInput, ", handler func(", g.serverInput, ")(", g.serverOutput, ")) (", g.serverOutput, "),")
	g.gf.P("	curr int,")
	g.gf.P("	finalHandler func(", g.serverInput, ")(", g.serverOutput, "),")
	g.gf.P(") func(", g.serverInput, ") (", g.serverOutput, ") {")
	g.gf.P("	if curr == len(middlewares)-1 {")
	g.gf.P("		return finalHandler")
	g.gf.P("	}")
	g.gf.P("	return func(", g.serverInput, ") (", g.serverOutput, ") {")
	g.gf.P("		return middlewares[curr+1](ctx, getChainServerMiddlewareHandler", g.filename, "(middlewares, curr+1, finalHandler))")
	g.gf.P("	}")
	g.gf.P("}")
}

// genUnmarshalRequestStruct generates unmarshalling from []byte to struct for request
func (g *Generator) genUnmarshalRequestStruct() {
	switch *g.cfg.Marshaller {
	case marshallerEasyJSON:
		g.gf.P("	if argEJ, ok := interface{}(arg).(", easyjsonPackage.Ident("Unmarshaler"), "); ok {")
		g.gf.P("		if err = ", easyjsonPackage.Ident("Unmarshal"), "(ctx.PostBody(), argEJ); err != nil {")
		g.gf.P("			return nil, err")
		g.gf.P("		}")
		g.gf.P("	} else {")
		g.gf.P("		if err = ", jsonPackage.Ident("Unmarshal"), "(ctx.PostBody(), arg); err != nil {")
		g.gf.P("			return nil, err")
		g.gf.P("		}")
		g.gf.P("	}")
	default:
		g.gf.P("	err = ", jsonPackage.Ident("Unmarshal"), "(ctx.PostBody(), arg)")
	}
}

func (g *Generator) genQueryCheck(f field) (err error) {
	g.gf.P("	case \"" + f.protoName + "\":")
	switch f.kind {
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Uint32Kind, protoreflect.Sfixed32Kind, protoreflect.Fixed32Kind:
		g.gf.P("	"+f.goName, "Str := string(value)")
		g.gf.P("	", f.goName, ", err := ", strconvPackage.Ident("ParseInt"), "(", f.goName, "Str, 10, 32)")
		g.gf.P("	if err != nil {")
		g.gf.P("		err = ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", f.goName, ": %w\", err)")
		g.gf.P("		return")
		g.gf.P("	}")
		g.gf.P("	arg.", f.goName, " = ", f.getGolangTypeName(), "(", f.goName, ")")
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
		g.gf.P("	"+f.goName, "Str := string(value)")
		g.gf.P("	arg.", f.goName, ", err = ", strconvPackage.Ident("ParseInt"), "(", f.goName, "Str, 10, 64)")
		g.gf.P("	if err != nil {")
		g.gf.P("		err = ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", f.goName, ": %w\", err)")
		g.gf.P("		return")
		g.gf.P("	}")
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		g.gf.P("	"+f.goName, "Str := string(value)")
		g.gf.P("	", f.goName, ", err := ", strconvPackage.Ident("ParseInt"), "(", f.goName, "Str, 10, 64)")
		g.gf.P("	if err != nil {")
		g.gf.P("		err = ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", f.goName, ": %w\", err)")
		g.gf.P("		return")
		g.gf.P("	}")
		g.gf.P("	arg.", f.goName, " = ", f.getGolangTypeName(), "(", f.goName, ")")
	case protoreflect.DoubleKind:
		g.gf.P("	"+f.goName, "Str := string(value)")
		g.gf.P("	arg.", f.goName, ", err = ", strconvPackage.Ident("ParseFloat"), "(", f.goName, "Str, 64)")
		g.gf.P("	if err != nil {")
		g.gf.P("		err = ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", f.goName, ": %w\", err)")
		g.gf.P("		return")
		g.gf.P("	}")
	case protoreflect.FloatKind:
		g.gf.P("	"+f.goName, "Str := string(value)")
		g.gf.P("	", f.goName, ", err := ", strconvPackage.Ident("ParseFloat"), "(", f.goName, "Str, 32)")
		g.gf.P("	if err != nil {")
		g.gf.P("		err = ", fmtPackage.Ident("Errorf"), "(\"conversion failed for parameter ", f.goName, ": %w\", err)")
		g.gf.P("		return")
		g.gf.P("	}")
		g.gf.P("	arg.", f.goName, " = float32(", f.goName, ")")
	case protoreflect.StringKind:
		g.gf.P("	arg." + f.goName + " = string(value)")
	case protoreflect.BytesKind:
		g.gf.P("	arg." + f.goName + " = value")
	case protoreflect.BoolKind:
		g.gf.P("	"+f.goName, "Str := string(value)")
		g.gf.P("	switch ", f.goName, "Str {")
		g.gf.P("	case \"true\", \"t\", \"1\":")
		g.gf.P("		arg." + f.goName + " = true")
		g.gf.P("	case \"false\", \"f\", \"0\":")
		g.gf.P("		arg." + f.goName + " = false")
		g.gf.P("	default:")
		g.gf.P("		err = ", fmtPackage.Ident("Errorf"), "(\"unknown bool string value %s\", ", f.goName, "Str)")
		g.gf.P("		return")
		g.gf.P("	}")
	case protoreflect.EnumKind:
		g.gf.P("	"+f.goName, "Str := string(value)")
		g.gf.P("	if ", f.enumName, "Value, ok := ", f.enumName, "_value[", stringsPackage.Ident("ToUpper"), "(", f.goName, "Str)]; ok {")
		g.gf.P("		arg.", f.goName, " = ", f.enumName, "(", f.enumName, "Value)")
		g.gf.P("	} else {")
		g.gf.P("		if intOptionValue, err := ", strconvPackage.Ident("ParseInt"), "(", f.goName, "Str, 10, 32); err == nil {")
		g.gf.P("			if _, ok := ", f.enumName, "_name[int32(intOptionValue)]; ok {")
		g.gf.P("	arg.", f.goName, " = ", f.enumName, "(intOptionValue)")
		g.gf.P("			}")
		g.gf.P("		}")
		g.gf.P("	}")
	default:
		return fmt.Errorf("unsupported type %s for path variable", f.kind.String())
	}
	return nil
}
