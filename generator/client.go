package generator

import (
	"regexp"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

var uriParametersRegexp = regexp.MustCompile(`(?mU){(.*)}`)

// GenerateClients generates HTTP clients for all services if the file
func (g *Generator) GenerateClients(gen *protogen.Plugin, file *protogen.File) (err error) {
	gf := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+".httpgo.cl.go", file.GoImportPath)
	gf.P("// Code generated by protoc-gen-httpgo. DO NOT EDIT.")
	gf.P("// source: ", file.Desc.Path())
	gf.P()
	gf.P("package ", file.GoPackageName)
	for srvName := range g.services {
		if err = g.genServiceClient(gf, srvName); err != nil {
			return err
		}
	}
	return nil
}

// genServiceClient generates HTTP client for service
func (g *Generator) genServiceClient(gf *protogen.GeneratedFile, srvName string) (err error) {
	gf.P("var _  ", srvName, "HTTPGoService = & ", srvName, "HTTPGoClient{}")
	gf.P("")
	gf.P("type  ", srvName, "HTTPGoClient struct {")
	gf.P("	cl   *", fasthttpPackage.Ident("Client"), "")
	gf.P("	host string")
	gf.P("}")
	gf.P("")
	gf.P("func Get", srvName, "HTTPGoClient(_ ", contextPackage.Ident("Context"), ", cl *", fasthttpPackage.Ident("Client"), ", host string) (* ", srvName, "HTTPGoClient, error) {")
	gf.P("	return & ", srvName, "HTTPGoClient{")
	gf.P("		cl:   cl,")
	gf.P("		host: host,")
	gf.P("	}, nil")
	gf.P("}")
	gf.P("")
	for _, method := range g.services[srvName] {
		if err = g.genClientMethod(gf, srvName, method); err != nil {
			return err
		}
	}
	return nil
}

// genClientMethod generates method for HTTP client
func (g *Generator) genClientMethod(
	gf *protogen.GeneratedFile,
	srvName string,
	method methodParams,
) (err error) {
	var (
		requestURI, paramsURI string
	)
	if requestURI, paramsURI, err = g.getRequestURIAndParams(method); err != nil {
		return err
	}
	gf.P("func (p * ", srvName, "HTTPGoClient) ", method.name, "(ctx ", contextPackage.Ident("Context"), ", request *", method.inputMsgName, ") (resp *", method.outputMsgName, ", err error) {")
	gf.P("    body, _ := ", jsonPackage.Ident("Marshal"), "(request)")
	gf.P("    req := &fasthttp.Request{}")
	gf.P("    req.SetBody(body)")
	gf.P("    req.SetRequestURI(p.host + ", fmtPackage.Ident("Sprintf"), "(\""+requestURI+"\""+paramsURI+"))")
	gf.P("    req.Header.SetMethod(\"", method.httpMethodName, "\")")
	gf.P("    reqResp := &fasthttp.Response{}")
	gf.P("    if err = p.cl.Do(req, reqResp); err != nil {")
	gf.P("        return nil, err")
	gf.P("    }")
	gf.P("    resp = &", method.outputMsgName, "{}")
	gf.P("    err = ", jsonPackage.Ident("Unmarshal"), "(reqResp.Body(), resp)")
	gf.P("    return resp, err")
	gf.P("}")
	return nil
}

// getRequestURIAndParams returns the request URI and parameters for the HTTP client method
func (g *Generator) getRequestURIAndParams(method methodParams) (requestURI, paramsURI string, err error) {
	requestURI = method.uri
	var placeholder string
	for _, match := range uriParametersRegexp.FindAllStringSubmatch(method.uri, -1) {
		if f, ok := method.fields[match[1]]; ok {
			if placeholder, err = f.getVariablePlaceholder(); err != nil {
				return "", "", err
			}
			requestURI = strings.ReplaceAll(requestURI, match[0], placeholder)
			paramsURI += ", request." + f.goName
		}
	}
	return requestURI, paramsURI, nil
}
