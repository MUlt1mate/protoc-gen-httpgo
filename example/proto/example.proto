syntax = "proto3";

package example;
option go_package = "github.com/MUlt1mate/protoc-gen-httpgo/example/proto;proto";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "somepackage.proto";

service ServiceName {
  rpc RPCName (InputMsgName) returns (OutputMsgName) {
    option (google.api.http) = {
      post: "/v1/test/{stringArgument}/{int64Argument}"
    };
  }
  rpc AllTypesTest (AllTypesMsg) returns (AllTypesMsg) {
    option (google.api.http) = {
      post: "/v1/test/{BoolValue}/{EnumValue}/{Int32Value}/{Sint32Value}/{Uint32Value}/{Int64Value}/{Sint64Value}/{Uint64Value}/{Sfixed32Value}/{Fixed32Value}/{FloatValue}/{Sfixed64Value}/{Fixed64Value}/{DoubleValue}/{StringValue}/{BytesValue}"
    };
  }
  rpc CommonTypes (google.protobuf.Any) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/test/commonTypes"
    };
  }
  rpc Imports (someCustomMsg1) returns (someCustomMsg2) {
    option (google.api.http) = {
      post: "/v1/test/imports"
    };
  }
  // same types but different query, we need different query builder function
  rpc sameInputAndOutput (InputMsgName) returns (OutputMsgName) {
    option (google.api.http) = {
      post: "/v1/test/{stringArgument}"
    };
  }
  // should be ignored
  rpc methodWithoutPath (InputMsgName) returns (OutputMsgName) {}
  // should be ignored
  rpc streams(stream InputMsgName) returns (stream OutputMsgName){
    option (google.api.http) = {
      post: "/v1/test/stream"
    };
  };
}

message InputMsgName {
  int64 int64Argument = 1;
  string stringArgument = 2;
}

message AllTypesMsg {
  bool BoolValue = 1;
  options EnumValue = 2;
  int32 Int32Value = 3;
  sint32 Sint32Value = 4;
  uint32 Uint32Value = 5;
  int64 Int64Value = 6;
  sint64 Sint64Value = 7;
  uint64 Uint64Value = 8;
  sfixed32 Sfixed32Value = 9;
  fixed32 Fixed32Value = 10;
  float FloatValue = 11;
  sfixed64 Sfixed64Value = 12;
  fixed64 Fixed64Value = 13;
  double DoubleValue = 14;
  string StringValue = 15;
  bytes BytesValue = 16;
  //  InputMsgName MessageValue = 17; // not supported
}

enum options {
  FIRST = 0;
  SECOND = 1;
} ;

message OutputMsgName {
  string stringValue = 1;
  int64 intValue = 2;
}
