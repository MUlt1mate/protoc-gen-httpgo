// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package proto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson758af8aDecodeGithubComMUlt1mateProtocGenHttpgoExampleProto(in *jlexer.Lexer, out *OutputMsgName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stringValue":
			out.StringValue = string(in.String())
		case "intValue":
			out.IntValue = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson758af8aEncodeGithubComMUlt1mateProtocGenHttpgoExampleProto(out *jwriter.Writer, in OutputMsgName) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StringValue != "" {
		const prefix string = ",\"stringValue\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.StringValue))
	}
	if in.IntValue != 0 {
		const prefix string = ",\"intValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IntValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutputMsgName) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson758af8aEncodeGithubComMUlt1mateProtocGenHttpgoExampleProto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutputMsgName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson758af8aEncodeGithubComMUlt1mateProtocGenHttpgoExampleProto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutputMsgName) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson758af8aDecodeGithubComMUlt1mateProtocGenHttpgoExampleProto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutputMsgName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson758af8aDecodeGithubComMUlt1mateProtocGenHttpgoExampleProto(l, v)
}
func easyjson758af8aDecodeGithubComMUlt1mateProtocGenHttpgoExampleProto1(in *jlexer.Lexer, out *OptionalField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stringValue":
			if in.IsNull() {
				in.Skip()
				out.StringValue = nil
			} else {
				if out.StringValue == nil {
					out.StringValue = new(string)
				}
				*out.StringValue = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson758af8aEncodeGithubComMUlt1mateProtocGenHttpgoExampleProto1(out *jwriter.Writer, in OptionalField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StringValue != nil {
		const prefix string = ",\"stringValue\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.StringValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OptionalField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson758af8aEncodeGithubComMUlt1mateProtocGenHttpgoExampleProto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OptionalField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson758af8aEncodeGithubComMUlt1mateProtocGenHttpgoExampleProto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OptionalField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson758af8aDecodeGithubComMUlt1mateProtocGenHttpgoExampleProto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OptionalField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson758af8aDecodeGithubComMUlt1mateProtocGenHttpgoExampleProto1(l, v)
}
func easyjson758af8aDecodeGithubComMUlt1mateProtocGenHttpgoExampleProto2(in *jlexer.Lexer, out *InputMsgName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "int64Argument":
			out.Int64Argument = int64(in.Int64())
		case "stringArgument":
			out.StringArgument = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson758af8aEncodeGithubComMUlt1mateProtocGenHttpgoExampleProto2(out *jwriter.Writer, in InputMsgName) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Int64Argument != 0 {
		const prefix string = ",\"int64Argument\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Int64Argument))
	}
	if in.StringArgument != "" {
		const prefix string = ",\"stringArgument\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StringArgument))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputMsgName) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson758af8aEncodeGithubComMUlt1mateProtocGenHttpgoExampleProto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputMsgName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson758af8aEncodeGithubComMUlt1mateProtocGenHttpgoExampleProto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputMsgName) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson758af8aDecodeGithubComMUlt1mateProtocGenHttpgoExampleProto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputMsgName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson758af8aDecodeGithubComMUlt1mateProtocGenHttpgoExampleProto2(l, v)
}
func easyjson758af8aDecodeGithubComMUlt1mateProtocGenHttpgoExampleProto3(in *jlexer.Lexer, out *AllTypesMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BoolValue":
			out.BoolValue = bool(in.Bool())
		case "EnumValue":
			out.EnumValue = Options(in.Int32())
		case "Int32Value":
			out.Int32Value = int32(in.Int32())
		case "Sint32Value":
			out.Sint32Value = int32(in.Int32())
		case "Uint32Value":
			out.Uint32Value = uint32(in.Uint32())
		case "Int64Value":
			out.Int64Value = int64(in.Int64())
		case "Sint64Value":
			out.Sint64Value = int64(in.Int64())
		case "Uint64Value":
			out.Uint64Value = uint64(in.Uint64())
		case "Sfixed32Value":
			out.Sfixed32Value = int32(in.Int32())
		case "Fixed32Value":
			out.Fixed32Value = uint32(in.Uint32())
		case "FloatValue":
			out.FloatValue = float32(in.Float32())
		case "Sfixed64Value":
			out.Sfixed64Value = int64(in.Int64())
		case "Fixed64Value":
			out.Fixed64Value = uint64(in.Uint64())
		case "DoubleValue":
			out.DoubleValue = float64(in.Float64())
		case "StringValue":
			out.StringValue = string(in.String())
		case "BytesValue":
			if in.IsNull() {
				in.Skip()
				out.BytesValue = nil
			} else {
				out.BytesValue = in.Bytes()
			}
		case "SliceStringValue":
			if in.IsNull() {
				in.Skip()
				out.SliceStringValue = nil
			} else {
				in.Delim('[')
				if out.SliceStringValue == nil {
					if !in.IsDelim(']') {
						out.SliceStringValue = make([]string, 0, 4)
					} else {
						out.SliceStringValue = []string{}
					}
				} else {
					out.SliceStringValue = (out.SliceStringValue)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.SliceStringValue = append(out.SliceStringValue, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson758af8aEncodeGithubComMUlt1mateProtocGenHttpgoExampleProto3(out *jwriter.Writer, in AllTypesMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BoolValue {
		const prefix string = ",\"BoolValue\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.BoolValue))
	}
	if in.EnumValue != 0 {
		const prefix string = ",\"EnumValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.EnumValue))
	}
	if in.Int32Value != 0 {
		const prefix string = ",\"Int32Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Int32Value))
	}
	if in.Sint32Value != 0 {
		const prefix string = ",\"Sint32Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Sint32Value))
	}
	if in.Uint32Value != 0 {
		const prefix string = ",\"Uint32Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Uint32Value))
	}
	if in.Int64Value != 0 {
		const prefix string = ",\"Int64Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Int64Value))
	}
	if in.Sint64Value != 0 {
		const prefix string = ",\"Sint64Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Sint64Value))
	}
	if in.Uint64Value != 0 {
		const prefix string = ",\"Uint64Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Uint64Value))
	}
	if in.Sfixed32Value != 0 {
		const prefix string = ",\"Sfixed32Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Sfixed32Value))
	}
	if in.Fixed32Value != 0 {
		const prefix string = ",\"Fixed32Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Fixed32Value))
	}
	if in.FloatValue != 0 {
		const prefix string = ",\"FloatValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.FloatValue))
	}
	if in.Sfixed64Value != 0 {
		const prefix string = ",\"Sfixed64Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Sfixed64Value))
	}
	if in.Fixed64Value != 0 {
		const prefix string = ",\"Fixed64Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Fixed64Value))
	}
	if in.DoubleValue != 0 {
		const prefix string = ",\"DoubleValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.DoubleValue))
	}
	if in.StringValue != "" {
		const prefix string = ",\"StringValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StringValue))
	}
	if len(in.BytesValue) != 0 {
		const prefix string = ",\"BytesValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.BytesValue)
	}
	if len(in.SliceStringValue) != 0 {
		const prefix string = ",\"SliceStringValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.SliceStringValue {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllTypesMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson758af8aEncodeGithubComMUlt1mateProtocGenHttpgoExampleProto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllTypesMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson758af8aEncodeGithubComMUlt1mateProtocGenHttpgoExampleProto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllTypesMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson758af8aDecodeGithubComMUlt1mateProtocGenHttpgoExampleProto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllTypesMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson758af8aDecodeGithubComMUlt1mateProtocGenHttpgoExampleProto3(l, v)
}
