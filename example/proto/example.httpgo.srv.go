// Code generated by protoc-gen-httpgo. DO NOT EDIT.
// source: proto/example.proto

package proto

import (
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	router "github.com/fasthttp/router"
	fasthttp "github.com/valyala/fasthttp"
	log "log"
	strconv "strconv"
)

type ServiceNameHTTPService interface {
	RPCName(context.Context, *InputMsgName) (*OutputMsgName, error)
}

func RegisterServiceNameHTTPServer(ctx context.Context, r *router.Router, h ServiceNameHTTPService) error {
	r.POST("/v1/test/{stringArgument}/{int64Argument}", func(ctx *fasthttp.RequestCtx) {
		input, err := buildInputMsgName(ctx)
		if err != nil {
			responseHandler(ctx, nil, err)
			return
		}
		response, err := h.RPCName(ctx, input)
		responseHandler(ctx, response, err)
	})

	return nil
}
func buildInputMsgName(ctx *fasthttp.RequestCtx) (arg *InputMsgName, err error) {
	arg = &InputMsgName{}
	json.Unmarshal(ctx.PostBody(), arg)
	stringArgumentStr, ok := ctx.UserValue("stringArgument").(string)
	if !ok {
		return nil, errors.New("incorrect type for parameter stringArgument")
	}
	arg.StringArgument = stringArgumentStr
	int64ArgumentStr, ok := ctx.UserValue("int64Argument").(string)
	if !ok {
		return nil, errors.New("incorrect type for parameter int64Argument")
	}
	arg.Int64Argument, err = strconv.ParseInt(int64ArgumentStr, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("conversion failed for parameter int64Argument: %w", err)
	}
	return arg, nil
}

func responseHandler(ctx *fasthttp.RequestCtx, resp interface{}, respErr error) {
	ctx.SetContentType("application/json")

	if respErr == nil {
		ctx.SetStatusCode(fasthttp.StatusOK)
	} else {
		log.Println(respErr)
		ctx.SetStatusCode(fasthttp.StatusInternalServerError)
	}

	var data, _ = json.Marshal(resp)
	_, _ = ctx.Write(data)
}
