// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: proto/example.proto

package proto

import (
	somepackage "github.com/MUlt1mate/protoc-gen-httpgo/example/proto/somepackage"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Options int32

const (
	Options_FIRST  Options = 0
	Options_SECOND Options = 1
)

// Enum value maps for Options.
var (
	Options_name = map[int32]string{
		0: "FIRST",
		1: "SECOND",
	}
	Options_value = map[string]int32{
		"FIRST":  0,
		"SECOND": 1,
	}
)

func (x Options) Enum() *Options {
	p := new(Options)
	*p = x
	return p
}

func (x Options) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Options) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_example_proto_enumTypes[0].Descriptor()
}

func (Options) Type() protoreflect.EnumType {
	return &file_proto_example_proto_enumTypes[0]
}

func (x Options) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Options.Descriptor instead.
func (Options) EnumDescriptor() ([]byte, []int) {
	return file_proto_example_proto_rawDescGZIP(), []int{0}
}

type InputMsgName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int64Argument  int64  `protobuf:"varint,1,opt,name=int64Argument,proto3" json:"int64Argument,omitempty"`
	StringArgument string `protobuf:"bytes,2,opt,name=stringArgument,proto3" json:"stringArgument,omitempty"`
}

func (x *InputMsgName) Reset() {
	*x = InputMsgName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_example_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputMsgName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputMsgName) ProtoMessage() {}

func (x *InputMsgName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_example_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputMsgName.ProtoReflect.Descriptor instead.
func (*InputMsgName) Descriptor() ([]byte, []int) {
	return file_proto_example_proto_rawDescGZIP(), []int{0}
}

func (x *InputMsgName) GetInt64Argument() int64 {
	if x != nil {
		return x.Int64Argument
	}
	return 0
}

func (x *InputMsgName) GetStringArgument() string {
	if x != nil {
		return x.StringArgument
	}
	return ""
}

type AllTypesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoolValue     bool    `protobuf:"varint,1,opt,name=BoolValue,proto3" json:"BoolValue,omitempty"`
	EnumValue     Options `protobuf:"varint,2,opt,name=EnumValue,proto3,enum=example.Options" json:"EnumValue,omitempty"`
	Int32Value    int32   `protobuf:"varint,3,opt,name=Int32Value,proto3" json:"Int32Value,omitempty"`
	Sint32Value   int32   `protobuf:"zigzag32,4,opt,name=Sint32Value,proto3" json:"Sint32Value,omitempty"`
	Uint32Value   uint32  `protobuf:"varint,5,opt,name=Uint32Value,proto3" json:"Uint32Value,omitempty"`
	Int64Value    int64   `protobuf:"varint,6,opt,name=Int64Value,proto3" json:"Int64Value,omitempty"`
	Sint64Value   int64   `protobuf:"zigzag64,7,opt,name=Sint64Value,proto3" json:"Sint64Value,omitempty"`
	Uint64Value   uint64  `protobuf:"varint,8,opt,name=Uint64Value,proto3" json:"Uint64Value,omitempty"`
	Sfixed32Value int32   `protobuf:"fixed32,9,opt,name=Sfixed32Value,proto3" json:"Sfixed32Value,omitempty"`
	Fixed32Value  uint32  `protobuf:"fixed32,10,opt,name=Fixed32Value,proto3" json:"Fixed32Value,omitempty"`
	FloatValue    float32 `protobuf:"fixed32,11,opt,name=FloatValue,proto3" json:"FloatValue,omitempty"`
	Sfixed64Value int64   `protobuf:"fixed64,12,opt,name=Sfixed64Value,proto3" json:"Sfixed64Value,omitempty"`
	Fixed64Value  uint64  `protobuf:"fixed64,13,opt,name=Fixed64Value,proto3" json:"Fixed64Value,omitempty"`
	DoubleValue   float64 `protobuf:"fixed64,14,opt,name=DoubleValue,proto3" json:"DoubleValue,omitempty"`
	StringValue   string  `protobuf:"bytes,15,opt,name=StringValue,proto3" json:"StringValue,omitempty"`
	BytesValue    []byte  `protobuf:"bytes,16,opt,name=BytesValue,proto3" json:"BytesValue,omitempty"` //  InputMsgName MessageValue = 17; // not supported
}

func (x *AllTypesMsg) Reset() {
	*x = AllTypesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_example_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTypesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTypesMsg) ProtoMessage() {}

func (x *AllTypesMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_example_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTypesMsg.ProtoReflect.Descriptor instead.
func (*AllTypesMsg) Descriptor() ([]byte, []int) {
	return file_proto_example_proto_rawDescGZIP(), []int{1}
}

func (x *AllTypesMsg) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *AllTypesMsg) GetEnumValue() Options {
	if x != nil {
		return x.EnumValue
	}
	return Options_FIRST
}

func (x *AllTypesMsg) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *AllTypesMsg) GetSint32Value() int32 {
	if x != nil {
		return x.Sint32Value
	}
	return 0
}

func (x *AllTypesMsg) GetUint32Value() uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return 0
}

func (x *AllTypesMsg) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *AllTypesMsg) GetSint64Value() int64 {
	if x != nil {
		return x.Sint64Value
	}
	return 0
}

func (x *AllTypesMsg) GetUint64Value() uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return 0
}

func (x *AllTypesMsg) GetSfixed32Value() int32 {
	if x != nil {
		return x.Sfixed32Value
	}
	return 0
}

func (x *AllTypesMsg) GetFixed32Value() uint32 {
	if x != nil {
		return x.Fixed32Value
	}
	return 0
}

func (x *AllTypesMsg) GetFloatValue() float32 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *AllTypesMsg) GetSfixed64Value() int64 {
	if x != nil {
		return x.Sfixed64Value
	}
	return 0
}

func (x *AllTypesMsg) GetFixed64Value() uint64 {
	if x != nil {
		return x.Fixed64Value
	}
	return 0
}

func (x *AllTypesMsg) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *AllTypesMsg) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *AllTypesMsg) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

type OutputMsgName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue string `protobuf:"bytes,1,opt,name=stringValue,proto3" json:"stringValue,omitempty"`
	IntValue    int64  `protobuf:"varint,2,opt,name=intValue,proto3" json:"intValue,omitempty"`
}

func (x *OutputMsgName) Reset() {
	*x = OutputMsgName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_example_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputMsgName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputMsgName) ProtoMessage() {}

func (x *OutputMsgName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_example_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputMsgName.ProtoReflect.Descriptor instead.
func (*OutputMsgName) Descriptor() ([]byte, []int) {
	return file_proto_example_proto_rawDescGZIP(), []int{2}
}

func (x *OutputMsgName) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *OutputMsgName) GetIntValue() int64 {
	if x != nil {
		return x.IntValue
	}
	return 0
}

var File_proto_example_proto protoreflect.FileDescriptor

var file_proto_example_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2f, 0x73, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xbb, 0x04, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x73,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0d,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0c, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0d, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x4d, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x20,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01,
	0x32, 0xe9, 0x06, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x6b, 0x0a, 0x07, 0x52, 0x50, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x2f, 0x7b, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x12, 0xad, 0x02,
	0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x22, 0xf0, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0xe9, 0x01, 0x22, 0xe6, 0x01, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x7b, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x45, 0x6e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x7d, 0x2f, 0x7b, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x7d,
	0x2f, 0x7b, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x7d, 0x2f, 0x7b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x7d,
	0x2f, 0x7b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x7d, 0x12, 0x59, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x07, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x73, 0x6f, 0x6d, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x31,
	0x1a, 0x1b, 0x2e, 0x73, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x73,
	0x6f, 0x6d, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x32, 0x22, 0x18, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x15, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x12,
	0x44, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x15, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x15, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4d, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x28, 0x01, 0x30, 0x01, 0x42, 0x3c, 0x5a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x55, 0x6c, 0x74, 0x31,
	0x6d, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x68, 0x74, 0x74, 0x70, 0x67, 0x6f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_example_proto_rawDescOnce sync.Once
	file_proto_example_proto_rawDescData = file_proto_example_proto_rawDesc
)

func file_proto_example_proto_rawDescGZIP() []byte {
	file_proto_example_proto_rawDescOnce.Do(func() {
		file_proto_example_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_example_proto_rawDescData)
	})
	return file_proto_example_proto_rawDescData
}

var file_proto_example_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_example_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_example_proto_goTypes = []interface{}{
	(Options)(0),                       // 0: example.options
	(*InputMsgName)(nil),               // 1: example.InputMsgName
	(*AllTypesMsg)(nil),                // 2: example.AllTypesMsg
	(*OutputMsgName)(nil),              // 3: example.OutputMsgName
	(*anypb.Any)(nil),                  // 4: google.protobuf.Any
	(*somepackage.SomeCustomMsg1)(nil), // 5: somepackage.someCustomMsg1
	(*emptypb.Empty)(nil),              // 6: google.protobuf.Empty
	(*somepackage.SomeCustomMsg2)(nil), // 7: somepackage.someCustomMsg2
}
var file_proto_example_proto_depIdxs = []int32{
	0, // 0: example.AllTypesMsg.EnumValue:type_name -> example.options
	1, // 1: example.ServiceName.RPCName:input_type -> example.InputMsgName
	2, // 2: example.ServiceName.AllTypesTest:input_type -> example.AllTypesMsg
	4, // 3: example.ServiceName.CommonTypes:input_type -> google.protobuf.Any
	5, // 4: example.ServiceName.Imports:input_type -> somepackage.someCustomMsg1
	1, // 5: example.ServiceName.sameInputAndOutput:input_type -> example.InputMsgName
	1, // 6: example.ServiceName.methodWithoutPath:input_type -> example.InputMsgName
	1, // 7: example.ServiceName.streams:input_type -> example.InputMsgName
	3, // 8: example.ServiceName.RPCName:output_type -> example.OutputMsgName
	2, // 9: example.ServiceName.AllTypesTest:output_type -> example.AllTypesMsg
	6, // 10: example.ServiceName.CommonTypes:output_type -> google.protobuf.Empty
	7, // 11: example.ServiceName.Imports:output_type -> somepackage.someCustomMsg2
	3, // 12: example.ServiceName.sameInputAndOutput:output_type -> example.OutputMsgName
	3, // 13: example.ServiceName.methodWithoutPath:output_type -> example.OutputMsgName
	3, // 14: example.ServiceName.streams:output_type -> example.OutputMsgName
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_example_proto_init() }
func file_proto_example_proto_init() {
	if File_proto_example_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_example_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputMsgName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_example_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTypesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_example_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputMsgName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_example_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_example_proto_goTypes,
		DependencyIndexes: file_proto_example_proto_depIdxs,
		EnumInfos:         file_proto_example_proto_enumTypes,
		MessageInfos:      file_proto_example_proto_msgTypes,
	}.Build()
	File_proto_example_proto = out.File
	file_proto_example_proto_rawDesc = nil
	file_proto_example_proto_goTypes = nil
	file_proto_example_proto_depIdxs = nil
}
