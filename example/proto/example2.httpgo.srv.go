// Code generated by protoc-gen-httpgo. DO NOT EDIT.
// source: proto/example2.proto

package proto

import (
	context "context"
	json "encoding/json"
	somepackage "github.com/MUlt1mate/protoc-gen-httpgo/example/proto/somepackage"
	router "github.com/fasthttp/router"
	fasthttp "github.com/valyala/fasthttp"
	log "log"
)

type ServiceName2HTTPGoService interface {
	Imports(context.Context, *somepackage.SomeCustomMsg1) (*somepackage.SomeCustomMsg2, error)
}

func RegisterServiceName2HTTPGoServer(
	ctx context.Context,
	r *router.Router,
	h ServiceName2HTTPGoService,
	middlewares []func(ctx *fasthttp.RequestCtx, handler func(ctx *fasthttp.RequestCtx)),
) error {
	var middleware = chainMiddlewaresExample2(middlewares)
	r.POST("/v1/test/imports", func(ctx *fasthttp.RequestCtx) {
		handler := func(ctx *fasthttp.RequestCtx) {
			input, err := buildExample2ServiceName2ImportsSomeCustomMsg1(ctx)
			if err != nil {
				responseHandlerExample2(ctx, nil, err)
				return
			}
			response, err := h.Imports(ctx, input)
			responseHandlerExample2(ctx, response, err)
		}
		if middleware == nil {
			handler(ctx)
			return
		}
		middleware(ctx, handler)
	})

	return nil
}

func buildExample2ServiceName2ImportsSomeCustomMsg1(ctx *fasthttp.RequestCtx) (arg *somepackage.SomeCustomMsg1, err error) {
	arg = &somepackage.SomeCustomMsg1{}
	err = json.Unmarshal(ctx.PostBody(), arg)
	return arg, err
}

type SecondServiceName2HTTPGoService interface {
	Imports(context.Context, *somepackage.SomeCustomMsg1) (*somepackage.SomeCustomMsg2, error)
}

func RegisterSecondServiceName2HTTPGoServer(
	ctx context.Context,
	r *router.Router,
	h SecondServiceName2HTTPGoService,
	middlewares []func(ctx *fasthttp.RequestCtx, handler func(ctx *fasthttp.RequestCtx)),
) error {
	var middleware = chainMiddlewaresExample2(middlewares)
	r.POST("/v1/test/imports", func(ctx *fasthttp.RequestCtx) {
		handler := func(ctx *fasthttp.RequestCtx) {
			input, err := buildExample2SecondServiceName2ImportsSomeCustomMsg1(ctx)
			if err != nil {
				responseHandlerExample2(ctx, nil, err)
				return
			}
			response, err := h.Imports(ctx, input)
			responseHandlerExample2(ctx, response, err)
		}
		if middleware == nil {
			handler(ctx)
			return
		}
		middleware(ctx, handler)
	})

	return nil
}

func buildExample2SecondServiceName2ImportsSomeCustomMsg1(ctx *fasthttp.RequestCtx) (arg *somepackage.SomeCustomMsg1, err error) {
	arg = &somepackage.SomeCustomMsg1{}
	err = json.Unmarshal(ctx.PostBody(), arg)
	return arg, err
}

func responseHandlerExample2(ctx *fasthttp.RequestCtx, resp interface{}, respErr error) {
	ctx.SetContentType("application/json")

	if respErr == nil {
		ctx.SetStatusCode(fasthttp.StatusOK)
	} else {
		log.Println(respErr)
		ctx.SetStatusCode(fasthttp.StatusInternalServerError)
	}

	var data, _ = json.Marshal(resp)
	_, _ = ctx.Write(data)
}

func chainMiddlewaresExample2(
	middlewares []func(ctx *fasthttp.RequestCtx, handler func(ctx *fasthttp.RequestCtx)),
) func(ctx *fasthttp.RequestCtx, handler func(ctx *fasthttp.RequestCtx)) {
	switch len(middlewares) {
	case 0:
		return nil
	case 1:
		return middlewares[0]
	default:
		return func(ctx *fasthttp.RequestCtx, handler func(ctx *fasthttp.RequestCtx)) {
			middlewares[0](ctx, getChainMiddlewareHandlerExample2(middlewares, 0, handler))
		}
	}
}

func getChainMiddlewareHandlerExample2(
	middlewares []func(ctx *fasthttp.RequestCtx, handler func(ctx *fasthttp.RequestCtx)),
	curr int,
	finalHandler func(ctx *fasthttp.RequestCtx),
) func(ctx *fasthttp.RequestCtx) {
	if curr == len(middlewares)-1 {
		return finalHandler
	}
	return func(ctx *fasthttp.RequestCtx) {
		middlewares[curr+1](ctx, getChainMiddlewareHandlerExample2(middlewares, curr+1, finalHandler))
	}
}
